<?php
namespace AppBundle\Entity\Region;

use       AppBundle\Entity\BaseRepository;
use       AppBundle\Service\Api\Region\RegionServiceEntityInterface;
use       AppBundle\Service\Api\Region\RegionServiceRepositoryInterface;
use       AppBundle\Service\Api\Place\PlaceServiceEntityInterface;
use       Doctrine\ORM\EntityRepository;

/**
 * RegionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RegionRepository extends BaseRepository implements RegionServiceRepositoryInterface
{
    /**
     * {@InheritDoc}
     */
    public function findByLocaleName($name, $locale)
    {
        return $this->findByLocaleField('name', $name, $locale);
    }
    
    /**
     * {@InheritDoc}
     */
    public function findByLocaleSeoName($seoName, $locale)
    {
        return $this->findByLocaleField('seoName', $seoName, $locale);
    }
    
    /**
     * This method fetches a region based on a locale field,
     * Because of certain schema design decisions of the old website
     * regions do 
     * 
     *
     * @param string $field
     * @param string $value
     * @param string $locale
     * @return array [0 => RegionServiceEntityInterface, 1 => PlaceServiceEntityInterface]
     */
    public function findByLocaleField($field, $value, $locale)
    {
        $field = $this->getLocaleField($field, $locale);
        $qb    = $this->getEntityManager()->createQueryBuilder();
        $expr  = $qb->expr();
        
        $qb->select('r, partial c.{id, name, englishName, germanName, startCode}, partial p.{id, name, englishName, germanName, seoName, englishSeoName, germanSeoName, altitude, distanceFromUtrecht}')
           ->from('AppBundle\Entity\Place\Place', 'p')
           ->leftJoin('p.region', 'r')
           ->leftJoin('p.country', 'c')
           ->where($expr->eq('r.' . $field, ':fieldName'))
           ->andWhere($expr->eq('p.season', ':season'))
           ->andWhere($expr->eq('r.season', ':season'))
           ->groupBy('p.id')
           ->setParameters([
               
               'fieldName' => $value,
               'season'    => $this->getSeason(),
           ]);

        return $qb->getQuery()->getResult();
    }
}
