<?php
namespace AppBundle\Entity\Country;
use       AppBundle\Entity\BaseRepository;
use       AppBundle\Concern\SeasonConcern;
use       AppBundle\Service\Api\Country\CountryServiceEntityInterface;
use       AppBundle\Service\Api\Country\CountryServiceRepositoryInterface;
use       Doctrine\ORM\EntityRepository;

/**
 * CountryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CountryRepository extends BaseRepository implements CountryServiceRepositoryInterface
{
	public function findActive()
	{
		$qb   = $this->createQueryBuilder('c');
		$expr = $qb->expr();
		
		$qb->select('partial c.{id, name, englishName, germanName, seoName, englishSeoName, germanSeoName, startCode}')
		   ->where($expr->eq('c.' . ($this->getSeason() === SeasonConcern::SEASON_WINTER ? 'd' : 'summerD') . 'isplay', ':display'))
		   ->setParameter('display',true);
		
		return $qb->getQuery()->getResult();
	}
	
    /**
     * {@InheritDoc}
     */
    public function findByLocaleName($name, $locale, $sort = 'alpha')
    {
        switch ($sort) {
                
            case 'slopes':
                $sortField = 'r.totalSlopesDistance';
                $sortOrder = 'DESC';
                break;
                
            case 'altitude':
                $sortField = 'r.maximumAltitude';
                $sortOrder = 'DESC';
                break;
                
            case 'alpha':
            default:
                $sortField = 'r.name';
                $sortOrder = 'ASC';
                break;
        }
        
        $field     = $this->getLocaleField('name', $locale);
        $qb        = $this->createQueryBuilder('c');
        $expr      = $qb->expr();
        
        $qb->select('partial r.{id, name, englishName, germanName, seoName, englishSeoName, germanSeoName, minimumAltitude, maximumAltitude, totalSlopesDistance}, partial c.{id, name, englishName, germanName, title, englishTitle, 
                     germanTitle, startCode, shortDescription, englishShortDescription, germanShortDescription, description, englishDescription, germanDescription, descriptionTag, englishDescriptionTag, germanDescriptionTag, additionalDescription, englishAdditionalDescription, germanAdditionalDescription}, 
                     partial p.{id}')
           ->leftJoin('c.places', 'p')
           ->leftJoin('p.region', 'r')
           ->where($expr->eq('c.' . $field, ':name'))
           ->andWhere($expr->eq('r.season', ':season'))
           ->andWhere('r.websites LIKE :website')
           ->andWhere('p.websites LIKE :website')
           ->groupBy('r.id')
           ->orderBy($sortField, $sortOrder)
           ->setParameters([
               
               'name'    => $name,
               'season'  => $this->getSeason(),
               'website' => '%' . $this->getWebsite() . '%',
           ]);
 
        return $qb->getQuery()->getSingleResult();
    }
    
    public function findRegions(CountryServiceEntityInterface $country)
    {
        $qb   = $this->createQueryBuilder('c');
        $expr = $qb->expr();
        
        $qb->select('partial p.{id}, partial r.{id, name, englishName, germanName, seoName, englishSeoName, germanSeoName}, partial c.{id, name, englishName, germanName}')
           ->leftJoin('c.places', 'p')
           ->leftJoin('p.region', 'r')
           ->where($expr->eq('c.id', ':countryId'))
           ->andWhere($expr->eq('r.season', ':season'))
           ->groupBy('r.id')
           ->orderBy('r.name', 'ASC')
           ->setParameters([
               
               'countryId' => $country->getId(),
               'season'    => $this->getSeason(),
           ]);
           
        return $qb->getQuery()->getSingleResult();
    }
}